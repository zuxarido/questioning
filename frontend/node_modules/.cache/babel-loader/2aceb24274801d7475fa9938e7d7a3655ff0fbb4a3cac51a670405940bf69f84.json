{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar named_references_1 = require(\"./named-references\");\nvar numeric_unicode_map_1 = require(\"./numeric-unicode-map\");\nvar surrogate_pairs_1 = require(\"./surrogate-pairs\");\nvar allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {\n  all: named_references_1.namedReferences.html5\n});\nvar encodeRegExps = {\n  specialChars: /[<>'\"&]/g,\n  nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g\n};\nvar defaultEncodeOptions = {\n  mode: \"specialChars\",\n  level: \"all\",\n  numeric: \"decimal\"\n};\nfunction encode(text, _a) {\n  var _b = _a === void 0 ? defaultEncodeOptions : _a,\n    _c = _b.mode,\n    mode = _c === void 0 ? \"specialChars\" : _c,\n    _d = _b.numeric,\n    numeric = _d === void 0 ? \"decimal\" : _d,\n    _e = _b.level,\n    level = _e === void 0 ? \"all\" : _e;\n  if (!text) {\n    return \"\";\n  }\n  var encodeRegExp = encodeRegExps[mode];\n  var references = allNamedReferences[level].characters;\n  var isHex = numeric === \"hexadecimal\";\n  return text.replace(encodeRegExp, function (input) {\n    var result = references[input];\n    if (!result) {\n      var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);\n      result = (isHex ? \"&#x\" + code.toString(16) : \"&#\" + code) + \";\";\n    }\n    return result;\n  });\n}\nexports.encode = encode;\nvar defaultDecodeOptions = {\n  scope: \"body\",\n  level: \"all\"\n};\nvar strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nvar attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\nvar baseDecodeRegExps = {\n  xml: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.xml\n  },\n  html4: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html4\n  },\n  html5: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html5\n  }\n};\nvar decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {\n  all: baseDecodeRegExps.html5\n});\nvar fromCharCode = String.fromCharCode;\nvar outOfBoundsChar = fromCharCode(65533);\nvar defaultDecodeEntityOptions = {\n  level: \"all\"\n};\nfunction getDecodedEntity(entity, references, isAttribute, isStrict) {\n  var decodeResult = entity;\n  var decodeEntityLastChar = entity[entity.length - 1];\n  if (isAttribute && decodeEntityLastChar === \"=\") {\n    decodeResult = entity;\n  } else if (isStrict && decodeEntityLastChar !== \";\") {\n    decodeResult = entity;\n  } else {\n    var decodeResultByReference = references[entity];\n    if (decodeResultByReference) {\n      decodeResult = decodeResultByReference;\n    } else if (entity[0] === \"&\" && entity[1] === \"#\") {\n      var decodeSecondChar = entity[2];\n      var decodeCode = decodeSecondChar == \"x\" || decodeSecondChar == \"X\" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));\n      decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);\n    }\n  }\n  return decodeResult;\n}\nfunction decodeEntity(entity, _a) {\n  var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,\n    level = _b === void 0 ? \"all\" : _b;\n  if (!entity) {\n    return \"\";\n  }\n  return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\nexports.decodeEntity = decodeEntity;\nfunction decode(text, _a) {\n  var _b = _a === void 0 ? defaultDecodeOptions : _a,\n    _c = _b.level,\n    level = _c === void 0 ? \"all\" : _c,\n    _d = _b.scope,\n    scope = _d === void 0 ? level === \"xml\" ? \"strict\" : \"body\" : _d;\n  if (!text) {\n    return \"\";\n  }\n  var decodeRegExp = decodeRegExps[level][scope];\n  var references = allNamedReferences[level].entities;\n  var isAttribute = scope === \"attribute\";\n  var isStrict = scope === \"strict\";\n  return text.replace(decodeRegExp, function (entity) {\n    return getDecodedEntity(entity, references, isAttribute, isStrict);\n  });\n}\nexports.decode = decode;","map":{"version":3,"names":["named_references_1","require","numeric_unicode_map_1","surrogate_pairs_1","allNamedReferences","__assign","namedReferences","all","html5","encodeRegExps","specialChars","nonAscii","nonAsciiPrintable","nonAsciiPrintableOnly","extensive","defaultEncodeOptions","mode","level","numeric","encode","text","_a","_b","_c","_d","_e","encodeRegExp","references","characters","isHex","replace","input","result","code","length","getCodePoint","charCodeAt","toString","exports","defaultDecodeOptions","scope","strict","attribute","baseDecodeRegExps","xml","body","bodyRegExps","html4","decodeRegExps","fromCharCode","String","outOfBoundsChar","defaultDecodeEntityOptions","getDecodedEntity","entity","isAttribute","isStrict","decodeResult","decodeEntityLastChar","decodeResultByReference","decodeSecondChar","decodeCode","parseInt","substr","fromCodePoint","numericUnicodeMap","decodeEntity","entities","decode","decodeRegExp"],"sources":["C:\\Users\\itzju\\questioning\\frontend\\node_modules\\html-entities\\src\\index.ts"],"sourcesContent":["import {bodyRegExps, namedReferences} from './named-references';\r\nimport {numericUnicodeMap} from './numeric-unicode-map';\r\nimport {fromCodePoint, getCodePoint} from './surrogate-pairs';\r\n\r\nconst allNamedReferences = {\r\n    ...namedReferences,\r\n    all: namedReferences.html5\r\n};\r\n\r\nexport type Level = 'xml' | 'html4' | 'html5' | 'all';\r\n\r\ninterface CommonOptions {\r\n    level?: Level;\r\n}\r\n\r\nexport type EncodeMode = 'specialChars' | 'nonAscii' | 'nonAsciiPrintable' | 'nonAsciiPrintableOnly' | 'extensive';\r\n\r\nexport interface EncodeOptions extends CommonOptions {\r\n    mode?: EncodeMode;\r\n    numeric?: 'decimal' | 'hexadecimal';\r\n}\r\n\r\nexport type DecodeScope = 'strict' | 'body' | 'attribute';\r\n\r\nexport interface DecodeOptions extends CommonOptions {\r\n    scope?: DecodeScope;\r\n}\r\n\r\nconst encodeRegExps: Record<EncodeMode, RegExp> = {\r\n    specialChars: /[<>'\"&]/g,\r\n    nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\r\n    nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\r\n    nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\r\n    extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g\r\n};\r\n\r\nconst defaultEncodeOptions: EncodeOptions = {\r\n    mode: 'specialChars',\r\n    level: 'all',\r\n    numeric: 'decimal'\r\n};\r\n\r\n/** Encodes all the necessary (specified by `level`) characters in the text */\r\nexport function encode(\r\n    text: string | undefined | null,\r\n    {mode = 'specialChars', numeric = 'decimal', level = 'all'}: EncodeOptions = defaultEncodeOptions\r\n) {\r\n    if (!text) {\r\n        return '';\r\n    }\r\n\r\n    const encodeRegExp = encodeRegExps[mode];\r\n    const references = allNamedReferences[level].characters;\r\n    const isHex = numeric === 'hexadecimal';\r\n\r\n    return text.replace(encodeRegExp, (input) => {\r\n        let result = references[input];\r\n        if (!result) {\r\n            const code = input.length > 1 ? getCodePoint(input, 0)! : input.charCodeAt(0);\r\n            result = (isHex ? '&#x' + code.toString(16) : '&#' + code) + ';';\r\n        }\r\n        return result;\r\n    });\r\n}\r\n\r\nconst defaultDecodeOptions: DecodeOptions = {\r\n    scope: 'body',\r\n    level: 'all'\r\n};\r\n\r\nconst strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\r\nconst attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\r\n\r\nconst baseDecodeRegExps: Record<Exclude<Level, 'all'>, Record<DecodeScope, RegExp>> = {\r\n    xml: {\r\n        strict,\r\n        attribute,\r\n        body: bodyRegExps.xml\r\n    },\r\n    html4: {\r\n        strict,\r\n        attribute,\r\n        body: bodyRegExps.html4\r\n    },\r\n    html5: {\r\n        strict,\r\n        attribute,\r\n        body: bodyRegExps.html5\r\n    }\r\n};\r\n\r\nconst decodeRegExps: Record<Level, Record<DecodeScope, RegExp>> = {\r\n    ...baseDecodeRegExps,\r\n    all: baseDecodeRegExps.html5\r\n};\r\n\r\nconst fromCharCode = String.fromCharCode;\r\nconst outOfBoundsChar = fromCharCode(65533);\r\n\r\nconst defaultDecodeEntityOptions: CommonOptions = {\r\n    level: 'all'\r\n};\r\n\r\nfunction getDecodedEntity(\r\n    entity: string,\r\n    references: Record<string, string>,\r\n    isAttribute: boolean,\r\n    isStrict: boolean\r\n): string {\r\n    let decodeResult = entity;\r\n    const decodeEntityLastChar = entity[entity.length - 1];\r\n    if (isAttribute && decodeEntityLastChar === '=') {\r\n        decodeResult = entity;\r\n    } else if (isStrict && decodeEntityLastChar !== ';') {\r\n        decodeResult = entity;\r\n    } else {\r\n        const decodeResultByReference = references[entity];\r\n        if (decodeResultByReference) {\r\n            decodeResult = decodeResultByReference;\r\n        } else if (entity[0] === '&' && entity[1] === '#') {\r\n            const decodeSecondChar = entity[2];\r\n            const decodeCode =\r\n                decodeSecondChar == 'x' || decodeSecondChar == 'X'\r\n                    ? parseInt(entity.substr(3), 16)\r\n                    : parseInt(entity.substr(2));\r\n\r\n            decodeResult =\r\n                decodeCode >= 0x10ffff\r\n                    ? outOfBoundsChar\r\n                    : decodeCode > 65535\r\n                    ? fromCodePoint(decodeCode)\r\n                    : fromCharCode(numericUnicodeMap[decodeCode] || decodeCode);\r\n        }\r\n    }\r\n    return decodeResult;\r\n}\r\n\r\n/** Decodes a single entity */\r\nexport function decodeEntity(\r\n    entity: string | undefined | null,\r\n    {level = 'all'}: CommonOptions = defaultDecodeEntityOptions\r\n): string {\r\n    if (!entity) {\r\n        return '';\r\n    }\r\n    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\r\n}\r\n\r\n/** Decodes all entities in the text */\r\nexport function decode(\r\n    text: string | undefined | null,\r\n    {level = 'all', scope = level === 'xml' ? 'strict' : 'body'}: DecodeOptions = defaultDecodeOptions\r\n) {\r\n    if (!text) {\r\n        return '';\r\n    }\r\n\r\n    const decodeRegExp = decodeRegExps[level][scope];\r\n    const references = allNamedReferences[level].entities;\r\n    const isAttribute = scope === 'attribute';\r\n    const isStrict = scope === 'strict';\r\n\r\n    return text.replace(decodeRegExp, (entity) => getDecodedEntity(entity, references, isAttribute, isStrict));\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}