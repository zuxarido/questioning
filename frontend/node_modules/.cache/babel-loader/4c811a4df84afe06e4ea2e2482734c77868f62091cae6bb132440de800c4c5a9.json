{"ast":null,"code":"var _jsxFileName = \"/Users/sujoydatta/Desktop/rag/questioning/frontend/src/components/DocumentUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Card, Button, ProgressBar } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DocumentUpload({\n  sessionId,\n  onFilesProcessed,\n  isProcessing,\n  setIsProcessing\n}) {\n  _s();\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [progressText, setProgressText] = useState('');\n  const handleFileUpload = async event => {\n    const files = event.target.files;\n    if (!files.length) return;\n    setIsProcessing(true);\n    setUploadProgress(0);\n    setProgressText('Preparing files for upload...');\n    try {\n      const formData = new FormData();\n      formData.append('session_id', sessionId);\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const progress = (i + 1) / files.length * 100;\n        setUploadProgress(progress);\n        setProgressText(`Processing ${file.name}...`);\n        formData.append('files', file);\n      }\n      const response = await fetch('http://127.0.0.1:5001/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.results) {\n          data.results.forEach(result => {\n            if (result.status === 'no text extracted') {\n              alert(`‚ö†Ô∏è Could not extract text from ${result.filename}. Please ensure it's a text-based PDF.`);\n            } else if (result.status === 'processed') {\n              console.log(`‚úÖ Successfully processed ${result.filename}`);\n            }\n          });\n        }\n        if (!data.results || !data.results.length) {\n          alert('‚ö†Ô∏è No text could be extracted from the uploaded files. We only support text-based PDF files for now.');\n        }\n        onFilesProcessed(data.processed_files);\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('‚ùå Upload failed. Please check if the backend server is running.');\n    } finally {\n      setIsProcessing(false);\n      setUploadProgress(0);\n      setProgressText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"upload-card\",\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCE4 Upload Documents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf\",\n          multiple: true,\n          onChange: handleFileUpload,\n          disabled: isProcessing,\n          className: \"file-input\",\n          id: \"file-upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"file-label\",\n          children: isProcessing ? 'Processing...' : 'Choose PDF files'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-container\",\n          children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n            now: uploadProgress,\n            label: `${Math.round(uploadProgress)}%`,\n            className: \"upload-progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"progress-text\",\n            children: progressText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(DocumentUpload, \"vNZ6cd61UeLdLLQGZc8jG8RSJJo=\");\n_c = DocumentUpload;\nexport default DocumentUpload;\nvar _c;\n$RefreshReg$(_c, \"DocumentUpload\");","map":{"version":3,"names":["React","useState","Card","Button","ProgressBar","jsxDEV","_jsxDEV","DocumentUpload","sessionId","onFilesProcessed","isProcessing","setIsProcessing","_s","uploadProgress","setUploadProgress","progressText","setProgressText","handleFileUpload","event","files","target","length","formData","FormData","append","i","file","progress","name","response","fetch","method","body","ok","data","json","results","forEach","result","status","alert","filename","console","log","processed_files","Error","error","className","children","Header","fileName","_jsxFileName","lineNumber","columnNumber","Body","type","accept","multiple","onChange","disabled","id","htmlFor","now","label","Math","round","_c","$RefreshReg$"],"sources":["/Users/sujoydatta/Desktop/rag/questioning/frontend/src/components/DocumentUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card, Button, ProgressBar } from 'react-bootstrap';\n\nfunction DocumentUpload({ sessionId, onFilesProcessed, isProcessing, setIsProcessing }) {\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [progressText, setProgressText] = useState('');\n\n  const handleFileUpload = async (event) => {\n    const files = event.target.files;\n    if (!files.length) return;\n\n    setIsProcessing(true);\n    setUploadProgress(0);\n    setProgressText('Preparing files for upload...');\n\n    try {\n      const formData = new FormData();\n      formData.append('session_id', sessionId);\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const progress = ((i + 1) / files.length) * 100;\n        setUploadProgress(progress);\n        setProgressText(`Processing ${file.name}...`);\n        \n        formData.append('files', file);\n      }\n\n      const response = await fetch('http://127.0.0.1:5001/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        if (data.results) {\n          data.results.forEach(result => {\n            if (result.status === 'no text extracted') {\n              alert(`‚ö†Ô∏è Could not extract text from ${result.filename}. Please ensure it's a text-based PDF.`);\n            } else if (result.status === 'processed') {\n              console.log(`‚úÖ Successfully processed ${result.filename}`);\n            }\n          });\n        }\n\n        if (!data.results || !data.results.length) {\n          alert('‚ö†Ô∏è No text could be extracted from the uploaded files. We only support text-based PDF files for now.');\n        }\n\n        onFilesProcessed(data.processed_files);\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('‚ùå Upload failed. Please check if the backend server is running.');\n    } finally {\n      setIsProcessing(false);\n      setUploadProgress(0);\n      setProgressText('');\n    }\n  };\n\n  return (\n    <Card className=\"upload-card\">\n      <Card.Header>\n        <h2>üì§ Upload Documents</h2>\n      </Card.Header>\n      <Card.Body>\n        <div className=\"upload-container\">\n          <input\n            type=\"file\"\n            accept=\".pdf\"\n            multiple\n            onChange={handleFileUpload}\n            disabled={isProcessing}\n            className=\"file-input\"\n            id=\"file-upload\"\n          />\n          <label htmlFor=\"file-upload\" className=\"file-label\">\n            {isProcessing ? 'Processing...' : 'Choose PDF files'}\n          </label>\n          \n          {isProcessing && (\n            <div className=\"progress-container\">\n              <ProgressBar \n                now={uploadProgress} \n                label={`${Math.round(uploadProgress)}%`}\n                className=\"upload-progress\"\n              />\n              <p className=\"progress-text\">{progressText}</p>\n            </div>\n          )}\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default DocumentUpload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}